MinGW_DLL\compile.bat "c:\simintech\demo\automatic\Нечёткая Логика\Фиксированая точка\fl_controller_fp"

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>REM Установка путей для компилятора MinGW (GCC) 

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>set path=C:\SimInTech\bin\;C:\SimInTech\bin\include_mvtu\;C:\SimInTech\bin\images_mvtu\;C:\Program Files\Parallels\Parallels Tools\Applications;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;..\..\..\MinGW\bin\ 

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>REM Компилируем исполняемый модуль  

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>del /q bin\*.* 

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>gcc -shared -o bin\example_cpp.dll -s src\uint32.c src\fract32.c src\fix16.c src\fix16_exp.c src\fix16_sqrt.c src\fix16_str.c src\fix16_trig.c src\example.c src\example.def -Wl,--add-stdcall-alias -fpack-struct=1 -Wconversion 
src\fract32.c: In function 'fract32_smul':
src\fract32.c:24:40: warning: conversion to 'uint32_t' from 'int32_t' may change the sign of the result [-Wsign-conversion]
         return -(int32_t)fract32_usmul(-inVal, inFract);
                                        ^
src\fract32.c:25:23: warning: conversion to 'uint32_t' from 'int32_t' may change the sign of the result [-Wsign-conversion]
  return fract32_usmul(inVal, inFract);
                       ^
src\fract32.c:25:2: warning: conversion to 'int32_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
  return fract32_usmul(inVal, inFract);
  ^
In file included from src\fix16.c:1:0:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fix16.c:1:0:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
In file included from src\fix16.c:2:0:
src\int64.h: In function 'int64_hi':
src\int64.h:12:46: warning: conversion to 'int32_t' from 'int64_t' may alter its value [-Wconversion]
 static inline  int32_t int64_hi(int64_t x) { return (x >> 32); }
                                              ^
src\int64.h: In function 'int64_lo':
src\int64.h:13:56: warning: conversion to 'long long unsigned int' from 'int64_t' may change the sign of the result [-Wsign-conversion]
 static inline uint32_t int64_lo(int64_t x) { return (x & ((1ULL << 32) - 1)); }
                                                        ^
src\fix16.c: In function 'fix16_add':
src\fix16.c:13:16: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t _a = a, _b = b;
                ^
src\fix16.c:13:24: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t _a = a, _b = b;
                        ^
src\fix16.c:21:2: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
  return sum;
  ^
src\fix16.c: In function 'fix16_sub':
src\fix16.c:26:16: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t _a = a, _b = b;
                ^
src\fix16.c:26:24: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t _a = a, _b = b;
                        ^
src\fix16.c:34:2: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
  return diff;
  ^
src\fix16.c: In function 'fix16_mul':
src\fix16.c:74:19: warning: conversion to 'uint32_t' from 'int64_t' may alter its value [-Wconversion]
  uint32_t upper = (product >> 47);
                   ^
src\fix16.c:100:19: warning: conversion to 'fix16_t' from 'int64_t' may alter its value [-Wconversion]
  fix16_t result = product >> 16;
                   ^
src\fix16.c:101:12: warning: conversion to 'fix16_t' from 'int64_t' may alter its value [-Wconversion]
  result += (product & 0x8000) >> 15;
            ^
src\fix16.c: In function 'fix16_div':
src\fix16.c:298:23: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t remainder = (a >= 0) ? a : (-a);
                       ^
src\fix16.c:299:21: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t divider = (b >= 0) ? b : (-b);
                     ^
src\fix16.c:310:16: warning: conversion to 'uint32_t' from 'long long unsigned int' may alter its value [-Wconversion]
   remainder -= ((uint64_t)quotient * divider) >> 17;
                ^
src\fix16.c:278:35: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 #define clz(x) (__builtin_clzl(x) - (8 * sizeof(long) - 32))
                                   ^
src\fix16.c:323:15: note: in expansion of macro 'clz'
   int shift = clz(remainder);
               ^
src\fix16.c:278:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 #define clz(x) (__builtin_clzl(x) - (8 * sizeof(long) - 32))
                ^
src\fix16.c:323:15: note: in expansion of macro 'clz'
   int shift = clz(remainder);
               ^
src\fix16.c:346:19: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
  fix16_t result = quotient >> 1;
                   ^
src\fix16.c:349:14: warning: conversion to 'unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  if ((a ^ b) & 0x80000000)
              ^
In file included from src\fix16_exp.c:1:0:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fix16_exp.c:1:0:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
In file included from src\fix16_sqrt.c:1:0:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fix16_sqrt.c:1:0:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
src\fix16_sqrt.c: In function 'fix16_sqrt':
src\fix16_sqrt.c:15:17: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uint32_t num = (neg ? -inValue : inValue);
                 ^
src\fix16_sqrt.c:15:17: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
In file included from src\fix16_str.c:1:0:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fix16_str.c:1:0:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
src\fix16_str.c: In function 'itoa_loop':
src\fix16_str.c:19:22: warning: conversion to 'char' from 'unsigned int' may alter its value [-Wconversion]
             *buf++ = '0' + digit;
                      ^
src\fix16_str.c: In function 'fix16_to_str':
src\fix16_str.c:30:23: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
     uint32_t uvalue = (value >= 0) ? value : -value;
                       ^
src\fix16_str.c:38:26: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
     fracpart = fix16_mul(fracpart, scale);
                          ^
src\fix16_str.c:38:36: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
     fracpart = fix16_mul(fracpart, scale);
                                    ^
src\fix16_str.c:38:16: warning: conversion to 'uint32_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
     fracpart = fix16_mul(fracpart, scale);
                ^
src\fix16_str.c: In function 'fix16_from_str':
src\fix16_str.c:76:17: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
         intpart += *buf++ - '0';
                 ^
src\fix16_str.c:84:21: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
     fix16_t value = intpart << 16;
                     ^
src\fix16_str.c:97:22: warning: conversion to 'uint32_t' from 'int' may change the sign of the result [-Wsign-conversion]
             fracpart += *buf++ - '0';
                      ^
src\fix16_str.c:100:28: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
         value += fix16_div(fracpart, scale);
                            ^
src\fix16_str.c:100:38: warning: conversion to 'fix16_t' from 'uint32_t' may change the sign of the result [-Wsign-conversion]
         value += fix16_div(fracpart, scale);
                                      ^
In file included from src\fix16_trig.c:2:0:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fix16_trig.c:2:0:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
src\fix16_trig.c: In function 'fix16_atan2':
src\fix16_trig.c:142:19: warning: conversion to 'uintptr_t' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  uintptr_t hash = (inX ^ inY);
                   ^
In file included from src\fixmath.h:15:0,
                 from src\example.c:4:
src\int64.h: In function 'int64_hi':
src\int64.h:12:46: warning: conversion to 'int32_t' from 'int64_t' may alter its value [-Wconversion]
 static inline  int32_t int64_hi(int64_t x) { return (x >> 32); }
                                              ^
src\int64.h: In function 'int64_lo':
src\int64.h:13:56: warning: conversion to 'long long unsigned int' from 'int64_t' may change the sign of the result [-Wsign-conversion]
 static inline uint32_t int64_lo(int64_t x) { return (x & ((1ULL << 32) - 1)); }
                                                        ^
In file included from src\fixmath.h:17:0,
                 from src\example.c:4:
src\fix16.h: At top level:
src\fix16.h:29:38: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t _FOUR_DIV_PI2 = 0xFFFF9840;        /*!< Fix16 value of -4/PIВІ */
                                      ^
src\fix16.h:35:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_minimum  = 0x80000000; /*!< the minimum value of fix16_t */
                                       ^
src\fix16.h:36:39: warning: conversion of unsigned constant value to negative integer [-Wsign-conversion]
 static const fix16_t fix16_overflow = 0x80000000; /*!< the value used to indicate overflows when FIXMATH_NO_OVERFLOW is not specified */
                                       ^
In file included from src\fixmath.h:17:0,
                 from src\example.c:4:
src\fix16.h: In function 'fix16_to_float':
src\fix16.h:50:67: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
 static inline float   fix16_to_float(fix16_t a) { return (float)a / fix16_one; }
                                                                   ^
src\fix16.h: In function 'fix16_from_float':
src\fix16.h:66:17: warning: conversion to 'float' from 'fix16_t' may alter its value [-Wconversion]
  float temp = a * fix16_one;
                 ^
src\fix16.h: In function 'fix16_floor':
src\fix16.h:96:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
              ^
src\fix16.h:96:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL); }
    ^
src\fix16.h: In function 'fix16_ceil':
src\fix16.h:98:14: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
              ^
src\fix16.h:98:35: warning: conversion to 'long unsigned int' from 'fix16_t' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                                   ^
src\fix16.h:98:30: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
                              ^
src\fix16.h:98:4: warning: conversion to 'fix16_t' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  { return (x & 0xFFFF0000UL) + (x & 0x0000FFFFUL ? fix16_one : 0); }
    ^
In file included from src\example.c:10:0:
src\prog.h: At top level:
src\prog.h:23:1: warning: this decimal constant is unsigned only in ISO C90
 const unsigned int sp_sheme_hash_32=2800126684;
 ^
Warning: resolving _INFO_FUNC by linking to _INFO_FUNC@76
Use --enable-stdcall-fixup to disable these warnings
Use --disable-stdcall-fixup to disable these fixups
Warning: resolving _INIT_FUNC by linking to _INIT_FUNC@56
Warning: resolving _RUN_FUNC by linking to _RUN_FUNC@60
Warning: resolving _STATE_FUNC by linking to _STATE_FUNC@60

C:\SimInTech\bin\CodeTemplates\FixPoint_16_16_MinGW_DLL>if 0 == 9009 (
 
 start ..\..\..\doc\compilerswarn.htm 
) 
